---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9142
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XuoC8g.oew2079yUyYnKptVTGs7HbJ1shA
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '42107'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:48:02 GMT
      Dm-Request-Id:
      - 1e4ba55b5edbb5c4
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:48:02 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.XuoC8g.oew2079yUyYnKptVTGs7HbJ1shA;
        Expires=Wed, 17-Jun-2020 12:48:02 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 1e4ba55b5edbb5c4
      X-B3-Traceid:
      - 1e4ba55b5edbb5c4
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - dad71a45-7f74-43fe-7a5d-92747013cccf
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f6486ebc6b1047af524348c38ba450e5.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR61-C1
      X-Amz-Cf-Id:
      - LcqWcf6xASMjtTF7fEI_P-i8D4_f_y8uJKdTBG6IK9eim_z13o-7rg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 17 Jun 2020 11:48:03 GMT
recorded_with: VCR 5.1.0
